using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Server.Engines.Spawners;

namespace Server.Misc
{
    public class GenCrops
    {
        private static readonly List<string> vegetableTypes =
        [
            "FarmableCarrot", "FarmableCabbage", "FarmableLettuce", "FarmableOnion", "FarmablePumpkin", "FarmableCotton",
            "FarmableFlax", "FarmableTurnip", "FarmableWheat"
        ];

        private const string SpawnerNamePrefix = "CropsGenSpawner_";
        private static readonly string spawnerDataFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SpawnerData.txt");

        public static void Initialize()
        {
            CommandSystem.Register("GenCrops", AccessLevel.Administrator, Generate_OnCommand);
            CommandSystem.Register("RemoveCrops", AccessLevel.Administrator, RemoveCrops_OnCommand);
        }

        private static void Generate_OnCommand(CommandEventArgs e)
        {
            Parse(e.Mobile, true);
            e.Mobile.SendMessage("Vegetable generation complete on all maps.");
        }

        private static void RemoveCrops_OnCommand(CommandEventArgs e)
        {
            Parse(e.Mobile, false);
            e.Mobile.SendMessage("Vegetable removal complete on all maps.");
        }

        private static void Parse(Mobile from, bool generate)
        {
            if (generate)
            {
                from.SendMessage("Generating vegetable spawners on dirt tiles on all maps...");
                List<string> spawnerData = [];
                foreach (Map map in Map.AllMaps)
                {
                    GenerateCropsOnMap(from, map, spawnerData);
                }
                WriteSpawnerDataToFile(spawnerData, from);
            }
            else
            {
                from.SendMessage("Removing vegetable spawners generated by GenCrops on all maps...");
                LoadAndDeleteSpawners(from);
            }
        }

        private static void GenerateCropsOnMap(Mobile from, Map map, List<string> spawnerData)
        {
            var random = new System.Random();
            int spawnerCount = 0;
            HashSet<Point2D> visited = [];

            for (int x = 0; x < map.Width; x++)
            {
                for (int y = 0; y < map.Height; y++)
                {
                    if (!visited.Contains(new Point2D(x, y)) && IsDirtTile(map, x, y))
                    {
                        List<Point2D> field = [];
                        FindField(map, x, y, visited, field);
                        if (field.Count > 0)
                        {
                            string vegetableType = vegetableTypes[random.Next(vegetableTypes.Count)];
                            foreach (var point in field)
                            {
                                if (random.NextDouble() < 0.5) // 50% chance to place a spawner
                                {
                                    Spawner spawner = MakeSpawner(vegetableType, point.X, point.Y, map);
                                    if (spawner != null)
                                    {
                                        spawnerData.Add($"{map.Name}|{point.X}|{point.Y}|{vegetableType}");
                                        spawnerCount++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            from.SendMessage($"{spawnerCount} vegetable spawners generated on {map.Name}.");
        }

        private static void WriteSpawnerDataToFile(List<string> spawnerData, Mobile from)
        {
            try
            {
                if (spawnerData.Count > 0)
                {
                    File.WriteAllLines(spawnerDataFilePath, spawnerData);
                    from.SendMessage($"Spawner data saved to {spawnerDataFilePath}");
                }
                else
                {
                    from.SendMessage("No spawner data to save.");
                }
            }
            catch (Exception ex)
            {
                from.SendMessage($"Error saving spawner data: {ex.Message}");
            }
        }

        private static void LoadAndDeleteSpawners(Mobile from)
        {
            if (!File.Exists(spawnerDataFilePath))
            {
                from.SendMessage("Spawner data file not found.");
                return;
            }

            try
            {
                string[] spawnerData = File.ReadAllLines(spawnerDataFilePath);
                foreach (string data in spawnerData)
                {
                    string[] parts = data.Split('|');
                    if (parts.Length != 4)
                    {
                        from.SendMessage("Invalid spawner data format.");
                        continue;
                    }

                    string mapName = parts[0];
                    int x = int.Parse(parts[1]);
                    int y = int.Parse(parts[2]);
                    string type = parts[3];

                    Map map = Map.AllMaps.FirstOrDefault(m => m.Name == mapName);
                    if (map == null)
                    {
                        continue;
                    }

                    Point3D point = new Point3D(x, y, map.GetAverageZ(x, y));
                    foreach (Item item in map.GetItemsInRange(point, 0))
                    {
                        if (item is Spawner spawner && spawner.Name == $"{SpawnerNamePrefix}{type}_{x}_{y}_{map.Name}")
                        {
                            spawner.Delete();
                            break;
                        }
                    }
                }
                File.Delete(spawnerDataFilePath);
            }
            catch (Exception ex)
            {
                from.SendMessage($"Error loading or deleting spawners: {ex.Message}");
            }
        }

        private static Spawner MakeSpawner(string vegetableType, int x, int y, Map map)
        {
            string spawnerName = $"{SpawnerNamePrefix}{vegetableType}_{x}_{y}_{map.Name}";
            Spawner spawner = new Spawner(vegetableType)
            {
                HomeRange = 0,
                MinDelay = TimeSpan.FromMinutes(2.5),
                MaxDelay = TimeSpan.FromMinutes(10.0),
                Name = spawnerName
            };
            spawner.MoveToWorld(new Point3D(x, y, map.GetAverageZ(x, y)), map);
            return spawner;
        }

        private static bool IsDirtTile(Map map, int x, int y)
        {
            LandTile landTile = map.Tiles.GetLandTile(x, y);
            return landTile.ID == 0x9;
        }

        private static void FindField(Map map, int x, int y, HashSet<Point2D> visited, List<Point2D> field)
        {
            Stack<Point2D> stack = new Stack<Point2D>();
            stack.Push(new Point2D(x, y));

            while (stack.Count > 0)
            {
                Point2D point = stack.Pop();
                if (!visited.Contains(point) && IsDirtTile(map, point.X, point.Y))
                {
                    visited.Add(point);
                    field.Add(point);

                    foreach (var neighbor in GetNeighbors(point))
                    {
                        if (!visited.Contains(neighbor) && IsDirtTile(map, neighbor.X, neighbor.Y))
                        {
                            stack.Push(neighbor);
                        }
                    }
                }
            }
        }

        private static IEnumerable<Point2D> GetNeighbors(Point2D point)
        {
            yield return new Point2D(point.X + 1, point.Y);
            yield return new Point2D(point.X - 1, point.Y);
            yield return new Point2D(point.X, point.Y + 1);
            yield return new Point2D(point.X, point.Y - 1);
        }
    }
}
