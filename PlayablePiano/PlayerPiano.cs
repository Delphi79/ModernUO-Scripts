/////////////////////////////////////////////////
//
// Automatically generated by the
// AddonGenerator script by Arya
//
/////////////////////////////////////////////////
//                                             //
// Gump & Keyboard Layout Designed by Moroth   //
// //    http://www.ultimanetwork.com     //   //
//                                             //
/////////////////////////////////////////////////

using Server.Network;
using Server.Gumps;

namespace Server.Items
{
    public class PianoAddon : BaseAddon
    {
        public override BaseAddonDeed Deed => new PianoAddonDeed();

        [Constructible]
        public PianoAddon()
        {
            var ac = new

                AddonComponent(2928)
                {
                    TempFlags = 0,
                    SavedFlags = 0,
                    Next = null,
                    Previous = null,
                    OnLinkList = false,
                    HeldBy = null,
                    LootType = LootType.Regular,
                    LastMoved = default,
                    Stackable = false,
                    Visible = false,
                    Movable = false,
                    IsLockedDown = false,
                    IsSecure = false,
                    Weight = 0,
                    Layer = Layer.Invalid,
                    NoMoveHS = false,
                    Name = null,
                    Parent = null,
                    Light = LightType.ArchedWindowEast,
                    Direction = Direction.North,
                    Amount = 0,
                    QuestItem = false,
                    Insured = false,
                    PaidInsurance = false,
                    BlessedFor = null,
                    Created = default,
                    Map = null,
                    Spawner = null,
                    Location = default,
                    X = 0,
                    Y = 0,
                    Z = 0,
                    Addon = null,
                    Offset = default,
                    _addon = null,
                    _offset = default,
                    Hue = 0
                };
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 2);

            ac = new AddonComponent(5981)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 6);

            ac = new AddonComponent(5984)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 8);

            ac = new AddonComponent(5981)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 7);

            ac = new AddonComponent(5985)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 9);

            ac = new AddonComponent(5431)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 10);

            ac = new AddonComponent(7933)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 7);

            ac = new AddonComponent(2480)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 1, 11);

            ac = new AddonComponent(7883)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, 0, 1);

            ac = new AddonComponent(2480)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, -1, -1, 2);

            ac = new AddonComponent(2924)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, -1, 0);

            ac = new AddonComponent(2925)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 0);

            ac = new AddonComponent(4006)
            {
                Name = "Piano Keys"
            };
            AddComponent(ac, 0, 0, 7);

            ac = new AddonComponent(5981)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 10);

            ac = new AddonComponent(7933)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(5991)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(5988)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 10);

            ac = new AddonComponent(5987)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 8);

            ac = new AddonComponent(5988)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(2252)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 0, 11);

            ac = new AddonComponent(2923)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 0);

            ac = new AddonComponent(2845)
            {
                Light = LightType.Circle225,
                Name = "A Candelabra"
            };
            AddComponent(ac, 0, 1, 17);

            ac = new AddonComponent(4006)
            {
                Name = "Piano Keys"
            };
            AddComponent(ac, 0, 1, 7);

            ac = new AddonComponent(7031)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 12);

            ac = new AddonComponent(7933)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 14);

            ac = new AddonComponent(5986)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 14);

            ac = new AddonComponent(5986)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 12);

            ac = new AddonComponent(5991)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 8);

            ac = new AddonComponent(5987)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 9);

            ac = new AddonComponent(5985)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 0, 1, 10);

            ac = new AddonComponent(3774)
            {
                Name = "Sheet Music"
            };
            AddComponent(ac, 1, 1, 15);

            ac = new AddonComponent(3772)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 1, 1, 12);

            ac = new AddonComponent(1114)
            {
                Hue = 1,
                Name = "Piano"
            };
            AddComponent(ac, 1, 0, 0);
        }

        public PianoAddon(Serial serial)
            : base(serial)
        {
        }

        public override void OnComponentUsed(AddonComponent ac, Mobile from)
        {
            if (!from.InRange(GetWorldLocation(), 1))
                from.SendMessage("You are too far away to use that!");

            else
            {
                if (ac.ItemID == 3774)
                {
                    from.SendGump(new PianoGump());
                }
            }
        }

        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }

    }

    public class PianoAddonDeed : BaseAddonDeed
    {
        public override BaseAddon Addon => new PianoAddon();

        [Constructible]
        public PianoAddonDeed() => Name = "Piano";

        public PianoAddonDeed(Serial serial)
            : base(serial)
        {
        }

        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}

namespace Server.Gumps
{
    public class PianoGump : Gump
    {
        public PianoGump()
            : base(0, 0)
        {

            this.Closable = true;
            this.Disposable = true;
            this.Draggable = true;
            this.Resizable = false;

            AddPage(0);
            AddBackground(204, 153, 394, 73, 9200);
            AddBackground(251, 155, 299, 70, 9270);
            AddButton(261, 187, 11374, 11374, 1);
            AddButton(281, 187, 11374, 11374, 2);
            AddButton(301, 187, 11374, 11374, 3);
            AddButton(321, 187, 11374, 11374, 4);
            AddButton(341, 187, 11374, 11374, 5);
            AddButton(361, 187, 11374, 11374, 6);
            AddButton(381, 187, 11374, 11374, 7);
            AddButton(401, 187, 11374, 11374, 8);
            AddButton(421, 187, 11374, 11374, 9);
            AddButton(441, 187, 11374, 11374, 10);
            AddButton(461, 187, 11374, 11374, 11);
            AddButton(481, 187, 11374, 11374, 12);
            AddButton(521, 187, 11374, 11374, 14);
            AddButton(501, 187, 11374, 11374, 13);
            AddImageTiled(261, 162, 280, 26, 11374);
            AddButton(274, 162, 10720, 10720, 20);
            AddButton(294, 162, 10720, 10720, 21);
            AddButton(334, 162, 10720, 10720, 22);
            AddButton(354, 162, 10720, 10720, 23);
            AddButton(374, 162, 10720, 10720, 24);
            AddButton(414, 162, 10720, 10720, 25);
            AddButton(434, 162, 10720, 10720, 26);
            AddButton(474, 162, 10720, 10720, 27);
            AddButton(494, 162, 10720, 10720, 28);
            AddButton(514, 162, 10720, 10720, 29);
            AddImage(208, 163, 10450);
            AddImage(555, 163, 10450);

        }

        public override void OnResponse(NetState sender, in RelayInfo info)
        {
            Mobile m = sender.Mobile;

            if (m == null)
                return;

            switch (info.ButtonID)
            {
                case 0: { m.SendMessage(60, "You stop playing."); break; }

                case 1: { m.PlaySound(1028); m.SendGump(new PianoGump()); break; }
                case 2: { m.PlaySound(1033); m.SendGump(new PianoGump()); break; }
                case 3: { m.PlaySound(1038); m.SendGump(new PianoGump()); break; }
                case 4: { m.PlaySound(1040); m.SendGump(new PianoGump()); break; }
                case 5: { m.PlaySound(1044); m.SendGump(new PianoGump()); break; }
                case 6: { m.PlaySound(1021); m.SendGump(new PianoGump()); break; }
                case 7: { m.PlaySound(1025); m.SendGump(new PianoGump()); break; }
                case 8: { m.PlaySound(1029); m.SendGump(new PianoGump()); break; }
                case 9: { m.PlaySound(1034); m.SendGump(new PianoGump()); break; }
                case 10: { m.PlaySound(1039); m.SendGump(new PianoGump()); break; }
                case 11: { m.PlaySound(1041); m.SendGump(new PianoGump()); break; }
                case 12: { m.PlaySound(1045); m.SendGump(new PianoGump()); break; }
                case 13: { m.PlaySound(1022); m.SendGump(new PianoGump()); break; }
                case 14: { m.PlaySound(1026); m.SendGump(new PianoGump()); break; }

                case 20: { m.PlaySound(1031); m.SendGump(new PianoGump()); break; } //CS1
                case 21: { m.PlaySound(1036); m.SendGump(new PianoGump()); break; } //DS1
                case 22: { m.PlaySound(1042); m.SendGump(new PianoGump()); break; } //FS1
                case 23: { m.PlaySound(1046); m.SendGump(new PianoGump()); break; } //GS1
                case 24: { m.PlaySound(1023); m.SendGump(new PianoGump()); break; } //AS1
                case 25: { m.PlaySound(1032); m.SendGump(new PianoGump()); break; } //CS2
                case 26: { m.PlaySound(1037); m.SendGump(new PianoGump()); break; }	//DS2
                case 27: { m.PlaySound(1045); m.SendGump(new PianoGump()); break; }	//FS2
                case 28: { m.PlaySound(1047); m.SendGump(new PianoGump()); break; }	//GS2
                case 29: { m.PlaySound(1024); m.SendGump(new PianoGump()); break; } //AS2
            }
        }
    }
}
